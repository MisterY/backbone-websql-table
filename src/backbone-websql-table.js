// Generated by CoffeeScript 1.4.0
(function() {

  define(['underscore'], function(_) {
    var Guid, WebSqlTableStore;
    Guid = (function() {
      var VARIANT_CLEAR, VARIANT_VALUE, VERSION_CLEAR, VERSION_VALUE;

      function Guid() {}

      Guid.prototype.S4 = function() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
      };

      VERSION_VALUE = 0x4;

      VERSION_CLEAR = 0x0;

      VARIANT_VALUE = 0x8;

      VARIANT_CLEAR = 0x3;

      Guid.prototype.guid = function() {
        var data3_version, data4_variant, newGuid;
        data3_version = this.S4();
        data3_version = (parseInt(data3_version.charAt(0), 16) & VERSION_CLEAR | VERSION_VALUE).toString(16) + data3_version.substr(1, 3);
        data4_variant = this.S4();
        data4_variant = data4_variant.substr(0, 2) + (parseInt(data4_variant.charAt(2), 16) & VARIANT_CLEAR | VARIANT_VALUE).toString(16) + data4_variant.substr(3, 1);
        newGuid = this.S4() + this.S4() + '-' + this.S4() + '-' + data3_version + '-' + data4_variant + '-' + this.S4() + this.S4() + this.S4();
        return newGuid;
      };

      return Guid;

    })();
    WebSqlTableStore = (function() {

      WebSqlTableStore.prototype.tableName = "";

      WebSqlTableStore.sync = function(method, model, options) {
        var findError, findSuccess, store;
        console.log("sync");
        if (!model.store) {
          store = new WebSqlTableStore(model, options);
        }
        switch (method) {
          case "read":
            console.log("sync: read");
            findSuccess = function(tx, res) {
              return console.log("find success", res.rows.length);
            };
            findError = function() {
              return console.error("find error");
            };
            if (model.attributes && model.attributes[model.idAttribute]) {
              return store.find(model, findSuccess, findError);
            } else {
              return store.findAll(model, options.success, options.error);
            }
            break;
          case "create":
            console.log("sync: create");
            return store.create(model, options.success, options.error);
          case "update":
            return console.log("sync: update");
          case "delete":
            return console.log("sync: delete");
        }
      };

      function WebSqlTableStore(model, options) {
        var defaultOptions;
        this.model = model;
        this.model.store = this;
        defaultOptions = this.getDefaultOptions();
        _.defaults(options, defaultOptions);
        this.tableName = model.constructor.name;
        options.tableName = this.tableName;
        this.db = this.openDatabase(options);
        this.createTable(this.model, options);
      }

      WebSqlTableStore.prototype.createTable = function(model, options) {
        var error, fieldsString, sql, success;
        if (!model) {
          console.error("Model not passed for store initialization!");
        }
        fieldsString = this.getFieldsString(model);
        success = function(tx, resultSet) {
          return console.log("table create success");
        };
        error = function(tx, error) {
          return window.console.error("Error while create table", error);
        };
        sql = "CREATE TABLE IF NOT EXISTS '" + options.tableName + "' ('id' unique" + fieldsString + ");";
        return this._executeSql(sql, null, success, error);
      };

      WebSqlTableStore.prototype.create = function(model, success, error) {
        var fields, fieldsPlaceholder, fieldsString, guid, id, obj, sql, values;
        if (!model.attributes[model.idAttribute]) {
          obj = {};
          if (model.attributes.apiid) {
            id = model.attributes.apiid;
          } else {
            guid = new Guid();
            id = guid.guid();
          }
          obj[model.idAttribute] = id;
          model.set(obj);
        }
        fields = this.getFieldsFrom(model);
        fieldsString = this.getFieldsString(fields);
        values = this.getModelAttributes(model);
        fieldsPlaceholder = this.getFieldsPlaceholder(fields);
        sql = "INSERT INTO '" + model.store.tableName + "' (" + fieldsString + ") VALUES (" + fieldsPlaceholder + ");";
        return this._executeSql(sql, values, success, error);
      };

      WebSqlTableStore.prototype.getDefaultOptions = function() {
        var options;
        return options = {
          success: function() {
            return console.log("default options, success");
          },
          error: function() {
            return console.log("default options, error");
          },
          databaseName: "BackboneWebSqlDb",
          tableName: "DefaultTable",
          dbVersion: "1.0",
          dbSize: 1000000
        };
      };

      WebSqlTableStore.prototype.getFieldsFrom = function(model) {
        var fields, key;
        if (!model) {
          throw {
            name: "InvalidArgumentException",
            message: "Model not passed to getFieldsFrom."
          };
        }
        fields = [];
        for (key in model.attributes) {
          fields.push(key);
        }
        return fields;
      };

      WebSqlTableStore.prototype.getFieldsString = function(fields) {
        var field, fieldsString, index, _i, _len;
        fieldsString = "";
        for (index = _i = 0, _len = fields.length; _i < _len; index = ++_i) {
          field = fields[index];
          if (index === 0) {
            fieldsString += "'" + field + "'";
          } else {
            fieldsString += ",'" + field + "'";
          }
        }
        return fieldsString;
      };

      WebSqlTableStore.prototype.getFieldsPlaceholder = function(fields) {
        var index, key, result, _i, _len;
        result = "";
        for (index = _i = 0, _len = fields.length; _i < _len; index = ++_i) {
          key = fields[index];
          if (index === 0) {
            result += "?";
          } else {
            result += ",?";
          }
        }
        return result;
      };

      WebSqlTableStore.prototype.getModelAttributes = function(model) {
        var key, values;
        values = [];
        for (key in model.attributes) {
          values.push(model.get(key));
        }
        return values;
      };

      WebSqlTableStore.prototype.getModelValuesString = function(model) {
        var value, values, valuesString, _i, _len;
        values = this.getModelAttributes(model);
        valuesString = "";
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          value = values[_i];
          valuesString += ",'" + value + "'";
        }
        return valuesString;
      };

      WebSqlTableStore.prototype.find = function(model, success, error) {
        var id, sql;
        id = model.attributes[model.idAttribute] || model.attributes.id;
        sql = "SELECT * FROM '" + this.tableName + "' WHERE('id'=?);";
        return this._executeSql(sql, [id], success, error);
      };

      WebSqlTableStore.prototype.findAll = function(model, success, error) {
        var sql;
        sql = "SELECT * FROM '" + this.tableName + "';";
        return this._executeSql(sql, null, success, error);
      };

      WebSqlTableStore.prototype.openDatabase = function(options) {
        if (!this.db) {
          this.databaseName = options.databaseName;
          this.db = window.openDatabase(this.databaseName, options.dbVersion, this.databaseName, options.dbSize);
        }
        return this.db;
      };

      WebSqlTableStore.prototype._executeSql = function(sql, params, success, error) {
        var txError, txSuccess,
          _this = this;
        success = success || function(tx, result) {
          return console.log("executeSql success");
        };
        error = error || function(tx, error) {
          return console.error(error);
        };
        txSuccess = function() {};
        txError = function() {};
        return this.db.transaction(function(tx) {
          console.debug("running on ", _this.databaseName, _this.tableName, sql);
          return tx.executeSql(sql, params, success, error);
        }, txError, txSuccess);
      };

      return WebSqlTableStore;

    })();
    return WebSqlTableStore;
  });

}).call(this);
