// Generated by CoffeeScript 1.4.0
(function() {

  define(['underscore'], function(_) {
    var WebSqlTableStore;
    WebSqlTableStore = (function() {

      function WebSqlTableStore(model, options) {
        var defaultOptions;
        this.model = model;
        defaultOptions = this.getDefaultOptions();
        _.extend(options, defaultOptions);
        options.tableName = model.constructor.name;
        this.openDatabase(options);
        this.createTable(options);
      }

      WebSqlTableStore.sync = function(method, model, options) {
        var store;
        store = WebSqlTableStore.getStoreForModel(model, options);
        switch (method) {
          case "read":
            return console.log("read");
          case "create":
            return console.log("create");
          case "update":
            return console.log("update");
          case "delete":
            return console.log("delete");
        }
      };

      WebSqlTableStore.getStoreForModel = function(model, options) {
        var store;
        if (!model.store) {
          store = new WebSqlTableStore(model, options);
          model.store = store;
        }
        return model.store;
      };

      WebSqlTableStore.prototype.getDefaultOptions = function() {
        var options;
        return options = {
          success: function() {
            return console.log("success");
          },
          error: function() {
            return console.log("error");
          },
          databaseName: "BackboneWebSqlDb",
          tableName: "DefaultTable",
          dbVersion: "1.0",
          dbSize: 1000000
        };
      };

      WebSqlTableStore.prototype.createTable = function(options) {
        var error, field, fields, fieldsString, key, sql, success, _i, _len;
        if (!this.model) {
          console.error("Model not passed for store initialization!");
        }
        console.debug("creating table");
        fields = [];
        for (key in this.model.attributes) {
          if (key !== "id") {
            fields.push(key);
          }
        }
        fieldsString = "";
        for (_i = 0, _len = fields.length; _i < _len; _i++) {
          field = fields[_i];
          fieldsString += ",'" + field + "'";
        }
        success = function(tx, res) {
          console.log("table created");
          if (options.success) {
            return options.success();
          }
        };
        error = function(tx, error) {
          window.console.error("Error while create table", error);
          if (options.error) {
            return options.error();
          }
        };
        sql = "CREATE TABLE IF NOT EXISTS '" + options.tableName + "' ('id' unique, " + fieldsString + ");";
        return this._executeSql(sql, null, success, error);
      };

      WebSqlTableStore.prototype.openDatabase = function(options) {
        if (!this.db) {
          this.db = window.openDatabase(options.databaseName, options.dbVersion, options.databaseName, options.dbSize);
        }
        return this.db;
      };

      WebSqlTableStore.prototype._executeSql = function(SQL, params, successCallback, errorCallback) {
        var error, success;
        success = function(tx, result) {
          if (successCallback) {
            return successCallback(tx, result);
          }
        };
        error = function(tx, error) {
          if (errorCallback) {
            return errorCallback(tx, error);
          }
        };
        return this.db.transaction(function(tx) {
          return tx.executeSql(SQL, params, success, error);
        });
      };

      return WebSqlTableStore;

    })();
    return WebSqlTableStore;
  });

}).call(this);
