// Generated by CoffeeScript 1.4.0
(function() {

  define(['underscore'], function(_) {
    var Guid, WebSqlTableStore;
    Guid = (function() {
      var VARIANT_CLEAR, VARIANT_VALUE, VERSION_CLEAR, VERSION_VALUE;

      function Guid() {}

      Guid.prototype.S4 = function() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
      };

      VERSION_VALUE = 0x4;

      VERSION_CLEAR = 0x0;

      VARIANT_VALUE = 0x8;

      VARIANT_CLEAR = 0x3;

      Guid.prototype.guid = function() {
        var data3_version, data4_variant, newGuid;
        data3_version = this.S4();
        data3_version = (parseInt(data3_version.charAt(0), 16) & VERSION_CLEAR | VERSION_VALUE).toString(16) + data3_version.substr(1, 3);
        data4_variant = this.S4();
        data4_variant = data4_variant.substr(0, 2) + (parseInt(data4_variant.charAt(2), 16) & VARIANT_CLEAR | VARIANT_VALUE).toString(16) + data4_variant.substr(3, 1);
        newGuid = this.S4() + this.S4() + '-' + this.S4() + '-' + data3_version + '-' + data4_variant + '-' + this.S4() + this.S4() + this.S4();
        return newGuid;
      };

      return Guid;

    })();
    WebSqlTableStore = (function() {

      WebSqlTableStore.prototype.tableName = "";

      WebSqlTableStore.prototype.debug = false;

      WebSqlTableStore.initialize = function(model, options) {
        var store;
        if (!model.store) {
          store = new WebSqlTableStore(model, options);
          model.store = store;
          return model.sync = store.sync;
        }
      };

      WebSqlTableStore.prototype.defaultOptions = {
        success: function() {
          if (this.debug) {
            return console.log("default options, success");
          }
        },
        error: function() {
          if (this.debug) {
            return console.log("default options, error");
          }
        },
        databaseName: "BackboneWebSqlDb",
        tableName: "DefaultTable",
        dbVersion: "1.0",
        dbSize: 1000000,
        debug: false
      };

      function WebSqlTableStore(model, options) {
        var actualModel;
        this.model = model;
        this.model.store = this;
        this.model.sync = this.sync;
        _.defaults(options, this.defaultOptions);
        this.debug = options.debug;
        this.setTableName(model, options);
        actualModel = this.getBackboneModelFor(model);
        this.model = actualModel;
        this.db = this.openDatabase(options);
        this.createTable(this.model, this.tableName);
      }

      WebSqlTableStore.prototype.createTable = function(model, tableName) {
        var error, fields, fieldsString, sql, success,
          _this = this;
        if (!model) {
          console.error("Model not passed for store initialization!");
        }
        if (!tableName) {
          throw {
            message: "tableName not passed to createTable."
          };
        }
        fields = this.getFieldsFrom(model);
        _(fields).reject(function(el) {
          return el === "id";
        });
        fieldsString = this.getFieldsString(fields);
        success = function(tx, resultSet) {
          if (_this.debug) {
            return console.log("table create success");
          }
        };
        error = function(tx, error) {
          return window.console.error("Error while create table", error);
        };
        sql = "CREATE TABLE IF NOT EXISTS '" + tableName + "' ('id' unique, " + fieldsString + ");";
        return this._executeSql(sql, null, success, error);
      };

      WebSqlTableStore.prototype.create = function(model, success, error) {
        var fields, fieldsPlaceholder, fieldsString, guid, id, obj, sql, values;
        if (!model.attributes[model.idAttribute]) {
          obj = {};
          if (model.attributes.apiid) {
            id = model.attributes.apiid;
          } else {
            guid = new Guid();
            id = guid.guid();
          }
          obj[model.idAttribute] = id;
          model.set(obj);
        }
        fields = this.getFieldsFrom(model);
        fieldsString = this.getFieldsString(fields);
        values = this.getModelAttributeValues(model);
        fieldsPlaceholder = this.getFieldsPlaceholder(fields);
        sql = "INSERT INTO '" + model.store.tableName + "' (" + fieldsString + ") VALUES (" + fieldsPlaceholder + ");";
        return this._executeSql(sql, values, success, error);
      };

      WebSqlTableStore.prototype["delete"] = function(model, success, error) {
        var id, sql;
        id = model.attributes[model.idAttribute] || model.attributes.id;
        sql = "DELETE FROM '" + this.tableName + "' WHERE (id=?);";
        return this._executeSql(sql, [model.attributes[model.idAttribute]], success, error);
      };

      WebSqlTableStore.prototype.getFieldsFrom = function(model) {
        var fields, key;
        if (!model) {
          throw {
            name: "InvalidArgumentException",
            message: "Model not passed to getFieldsFrom."
          };
        }
        fields = [];
        for (key in model.attributes) {
          fields.push(key);
        }
        return fields;
      };

      WebSqlTableStore.prototype.getFieldsString = function(fields) {
        var field, fieldsString, index, _i, _len;
        fieldsString = "";
        for (index = _i = 0, _len = fields.length; _i < _len; index = ++_i) {
          field = fields[index];
          if (index === 0) {
            fieldsString += "'" + field + "'";
          } else {
            fieldsString += ",'" + field + "'";
          }
        }
        return fieldsString;
      };

      WebSqlTableStore.prototype.getFieldsPlaceholder = function(fields) {
        var index, key, result, _i, _len;
        result = "";
        for (index = _i = 0, _len = fields.length; _i < _len; index = ++_i) {
          key = fields[index];
          if (index === 0) {
            result += "?";
          } else {
            result += ",?";
          }
        }
        return result;
      };

      WebSqlTableStore.prototype.getBackboneModelFor = function(obj) {
        var model;
        if (obj instanceof Backbone.Collection) {
          model = new obj.model();
        }
        if (obj instanceof Backbone.Model) {
          model = obj;
        }
        return model;
      };

      WebSqlTableStore.prototype.getModelAttributeValues = function(model) {
        var key, values;
        values = [];
        for (key in model.attributes) {
          values.push(model.get(key));
        }
        return values;
      };

      WebSqlTableStore.prototype.getModelValuesString = function(model) {
        var value, values, valuesString, _i, _len;
        values = this.getModelAttributeValues(model);
        valuesString = "";
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          value = values[_i];
          valuesString += ",'" + value + "'";
        }
        return valuesString;
      };

      WebSqlTableStore.prototype.getUpdateFieldsAndValuesArray = function(model) {
        var fields, i, result, values, _i, _ref;
        fields = this.getFieldsFrom(model);
        values = this.getModelAttributeValues(model);
        result = [];
        for (i = _i = 0, _ref = fields.length - 1; _i <= _ref; i = _i += 1) {
          result.push(fields[i]);
          result.push(values[i]);
        }
        return result;
      };

      WebSqlTableStore.prototype.find = function(model, success, error) {
        var id, sql;
        id = model.attributes[model.idAttribute] || model.attributes.id;
        sql = "SELECT * FROM '" + this.tableName + "' WHERE (id=?);";
        return this._executeSql(sql, [id], success, error);
      };

      WebSqlTableStore.prototype.findAll = function(model, filter, success, error) {
        var param, params, sql;
        sql = "SELECT * FROM '" + this.tableName + "'";
        params = [];
        if (filter) {
          sql += " WHERE (";
          for (param in filter) {
            sql += param;
            sql += "=?";
            params.push(filter[param]);
          }
          sql += ")";
        }
        sql += ";";
        return this._executeSql(sql, params, success, error);
      };

      WebSqlTableStore.prototype.openDatabase = function(options) {
        if (!this.db) {
          this.databaseName = options.databaseName;
          this.db = window.openDatabase(this.databaseName, options.dbVersion, this.databaseName, options.dbSize);
        }
        return this.db;
      };

      WebSqlTableStore.prototype._executeSql = function(sql, params, success, error) {
        var txError, txSuccess,
          _this = this;
        success = success || function(tx, result) {
          if (this.debug) {
            return console.log("executeSql success");
          }
        };
        error = function(tx, err) {
          console.error(err);
          if (error) {
            return error(err);
          }
        };
        txSuccess = function() {};
        txError = function() {};
        return this.db.transaction(function(tx) {
          if (_this.debug) {
            console.debug("running on", _this.databaseName, _this.tableName, ":", sql, "with params", params);
          }
          return tx.executeSql(sql, params, success, error);
        }, txError, txSuccess);
      };

      WebSqlTableStore.prototype.setTableName = function(model, options) {
        var tableName;
        if (model instanceof Backbone.Collection) {
          tableName = model.model.name;
        }
        if (model instanceof Backbone.Model) {
          tableName = model.constructor.name;
        }
        if (tableName) {
          options.tableName = tableName;
        }
        return this.tableName = tableName;
      };

      WebSqlTableStore.prototype.sync = function(method, model, options) {
        var onError, store, success,
          _this = this;
        if (!model.store) {
          throw {
            message: "WebSql Table store not initialized for model."
          };
        }
        store = model.store;
        switch (method) {
          case "read":
            if (this.debug) {
              console.log("sync: read");
            }
            onError = function() {
              console.error("find error");
              if (options.error) {
                return options.error();
              }
            };
            if (model instanceof Backbone.Collection) {
              success = function(tx, res) {
                var i, len, result, _i, _ref;
                if (_this.debug) {
                  console.log("loaded collection");
                }
                len = res.rows.length;
                if (len > 0) {
                  result = [];
                  for (i = _i = 0, _ref = len - 1; _i <= _ref; i = _i += 1) {
                    result.push(res.rows.item(i));
                  }
                }
                return options.success(result);
              };
              store.findAll(model, options.filter, success, onError);
            }
            if (model instanceof Backbone.Model) {
              success = function(tx, res) {
                var len, result;
                if (this.debug) {
                  console.log("find success", res.rows.length);
                }
                len = res.rows.length;
                if (len > 0) {
                  result = res.rows.item(0);
                }
                return options.success(result);
              };
              return store.find(model, success, onError);
            }
            break;
          case "create":
            if (this.debug) {
              console.log("sync: create");
            }
            return store.create(model, options.success, options.error);
          case "update":
            if (this.debug) {
              console.log("sync: update");
            }
            return store.update(model, options.success, options.error);
          case "delete":
            if (this.debug) {
              console.log("sync: delete");
            }
            return store["delete"](model, options.success, options.error);
        }
      };

      WebSqlTableStore.prototype.update = function(model, success, error) {
        var fields, i, id, sql, values, _i, _ref;
        if (this.debug) {
          console.log("updating model", model.get('id'));
        }
        id = model.attributes[model.idAttribute] || model.attributes.id;
        sql = "UPDATE '" + this.tableName + "' SET ";
        fields = this.getFieldsFrom(model);
        for (i = _i = 0, _ref = fields.length - 1; _i <= _ref; i = _i += 1) {
          if (i !== 0) {
            sql += ", ";
          }
          sql += fields[i];
          sql += "=?";
        }
        sql += " WHERE (id=?)";
        values = this.getModelAttributeValues(model);
        values.push(model.get('id'));
        return this._executeSql(sql, values, success, error);
      };

      return WebSqlTableStore;

    })();
    return WebSqlTableStore;
  });

}).call(this);
